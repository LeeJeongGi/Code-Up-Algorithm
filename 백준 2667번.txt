#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

const int MAX = 25;
int n;
int cnt;
string graph[MAX];
vector<int> residance;
bool visited[MAX][MAX];

typedef struct
{
	int y, x;
}dir;

dir moveDir[4] = { {1,0}, {-1,0}, {0,1}, {0,-1} };

void dfs(int y, int x)
{
	cnt++;
	visited[y][x] = true;

	for (int i = 0; i < 4; i++)
	{
		int nextY = y + moveDir[i].y;
		int nextX = x + moveDir[i].x;

		if (0 <= nextX && nextX < n && 0 <= nextY && nextY < n)
			if (graph[nextY][nextX] == '1' && visited[nextY][nextX] == false)
				dfs(nextY, nextX);
	}
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> graph[i];
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (graph[i][j] == '1' && visited[i][j] == false)
			{
				cnt = 0;
				dfs(i, j);
				residance.push_back(cnt);
			}
		}
	}
	sort(residance.begin(), residance.end());
	cout << residance.size() << endl;
	for (int i = 0; i < residance.size(); i++)
		cout << residance[i] << endl;


	return 0;
}