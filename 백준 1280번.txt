#include <iostream>
#include <queue>
#include <cstring>
using namespace std;
#define MAX 1001

bool visited[MAX];
int n, m, v;
int adjacent[MAX][MAX];
queue<int> q;

void bfs(int idx)
{
	q.push(idx);
	visited[idx] = true;

	while (!q.empty())
	{
		int idx = q.front();
		q.pop();
		cout << idx << " ";

		for (int i = 1; i <= n; i++)
		{
			if (adjacent[idx][i] && !visited[i])
			{
				visited[i] = true;
				q.push(i);
			}
		}
	}
}
void dfs(int idx)
{
	cout << idx << " ";
	for (int i = 1; i <= n; i++)
	{
		if (adjacent[idx][i] && !visited[i])
		{
			visited[i] = true;
			dfs(i);
		}
	}
}
int main()
{
	cin >> n >> m >> v;

	for (int i = 0; i < m; i++)
	{
		int from, to;
		cin >> from >> to;
		adjacent[from][to] = 1;
		adjacent[to][from] = 1;
	}

	visited[v] = true;
	dfs(v);
	cout << endl;

	memset(visited, false, sizeof(visited));
	bfs(v);
	cout << endl;

	return 0;
}