#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAX = 21;
const int INF = 987654321;
int n, result;
int team[MAX][MAX];

void dfs(string bit, int startTeam, int linkTeam)
{
	if (bit.length() == n)
	{
		vector<int> start;
		vector<int> link;
		for (int i = 0; i < bit.length(); i++)
		{
			if (bit[i] == '1')
				start.push_back(i);
			else
				link.push_back(i);
		}

		int startTeamSum = 0;
		for (int i = 0; i < start.size(); i++)
			for (int j = i + 1; j < start.size(); j++)
				startTeamSum += (team[start[i]][start[j]] + team[start[j]][start[i]]);

		int linkTeamSum = 0;
		for (int i = 0; i < link.size(); i++)
			for (int j = i + 1; j < link.size(); j++)
				linkTeamSum += (team[link[i]][link[j]] + team[link[j]][link[i]]);

		result = min(result, abs(startTeamSum - linkTeamSum));
		return;
	}

	if (startTeam < n / 2)
		dfs(bit + "1", startTeam + 1, linkTeam);
	if (linkTeam < n / 2)
		dfs(bit + "0", startTeam, linkTeam + 1);
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> team[i][j];

	result = INF;
	dfs("", 0, 0);
	cout << result << endl;

	return 0;
}