#include <iostream>
#include <deque>
using namespace std;
const int MAX = 1000;

typedef struct
{
	int y, x;
}Dir;
Dir moveDir[4] = { {1,0}, {-1,0}, {0,1},{0,-1} };

int n, m;
int tomato[MAX][MAX];
deque<pair<int, int>> dq;
int noTomato;

bool allRipe(void)
{
	int possible = m * n - noTomato;
	int cnt = 0;
	for(int i=0; i<m; i++)
		for (int j = 0; j < n; j++)
		{
			if (tomato[i][j] == 1)
				cnt++;
		}
	return possible == cnt;
}

int bfs(void)
{
	int day = 0;
	//처음부터 익힐 수 없는 토마토가 없다.
	if (dq.empty())
		return -1;

	while (!dq.empty())
	{
		int currentSize = dq.size();
		for (int i = 0; i < currentSize; i++)
		{
			int y = dq.front().first;
			int x = dq.front().second;

			for (int i = 0; i < 4; i++)
			{
				int nextY = y + moveDir[i].y;
				int nextX = x + moveDir[i].x;

				if (0 <= nextY && nextY < m && 0 <= nextX && nextX < n && tomato[nextY][nextX] == 0)
				{
					tomato[nextY][nextX] = 1;
					dq.push_back(make_pair(nextY, nextX));
				}
			}
			dq.pop_front();
			//모두 잘 익었을경우.
			if (dq.size() == 0 && allRipe())
				return day;
			//익힐 수 없는 토마토가 존재 할때
			else if (dq.size() == 0 && !allRipe())
				return -1;
		}
		day++;
	}
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; ++j)
		{
			cin >> tomato[i][j];

			if (tomato[i][j] == 1)
				dq.push_back(make_pair(i, j));
			else if (tomato[i][j] == -1)
				noTomato++;
		}
	}
	if (dq.size() == n * m - noTomato)
	{
		cout << 0 << endl;
	}
	else
	{
		int result = bfs();
		cout << result << endl;
	}
	return 0;
}