#include <iostream>
#include <algorithm>
using namespace std;

typedef struct
{
	int y, x;
}Dir;
Dir moveDir[4] = { {1,0}, {-1,0}, {0,1}, {0,-1} };

const int MAX = 500;
int n, m;
int cell[MAX][MAX];
bool visited[MAX][MAX];

int dfs(int y, int x, int cnt)
{
	if (cnt == 4)
		return cell[y][x];

	int sum = 0;
	for (int i = 0; i < 4; i++)
	{
		int nextY = y + moveDir[i].y;
		int nextX = x + moveDir[i].x;

		if (0 <= nextY && nextY < n && 0 <= nextX && nextX < m && !visited[nextY][nextX])
		{
			visited[nextY][nextX] = true;
			sum = max(sum, cell[y][x]+dfs(nextY, nextX, cnt + 1));
			visited[nextY][nextX] = false;
		}
	}
	return sum;
}

int nodfs(int y, int x)
{
	int result = 0;
	//ㅗ
	if (y >= 1 && x >= 1 && x < m - 1)
		result = max(result, cell[y][x - 1] + cell[y][x] + cell[y - 1][x] + cell[y][x + 1]);
	//ㅜ
	if (y >= 0 && y<n-1 && x < m - 1)
		result = max(result, cell[y][x - 1] + cell[y][x] + cell[y + 1][x] + cell[y][x + 1]);
	//ㅏ
	if (y >= 1 && x < m-1 && y < n - 1)
		result = max(result, cell[y - 1][x] + cell[y][x] + cell[y + 1][x] + cell[y][x + 1]);
	//ㅓ
	if (y >= 1 && x >= 1 && y < n - 1)
		result = max(result, cell[y - 1][x] + cell[y][x] + cell[y + 1][x] + cell[y][x - 1]);

	return result;
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> cell[i][j];

	int result = 0;
	for(int i=0; i<n; i++)
		for (int j = 0; j < m; j++)
		{
			visited[i][j] = true;
			result = max(dfs(i,j,1), result);
			result = max(nodfs(i,j), result);
			visited[i][j] = false;
		}
	
	cout << result << endl;
	return 0;
}